Factors of Integer
Given an integer number, return all possible combinations of the factors that can multiply to the target number.

Example

Give A = 24

since 24 = 2 x 2 x 2 x 3

              = 2 x 2 x 6

              = 2 x 3 x 4

              = 2 x 12

              = 3 x 8

              = 4 x 6

your solution should return

{ { 2, 2, 2, 3 }, { 2, 2, 6 }, { 2, 3, 4 }, { 2, 12 }, { 3, 8 }, { 4, 6 } }

note: duplicate combination is not allowed.

combination of Factors

List<Integer> combo = new ArrayList<>();
public class Solution {
  public List<List<Integer>> combinations(int target) {
    //levels depend on how many factors in these target;
    //so I need to find all the factors

    //bottom up， top down 的方式都可以，就是取决于怎么调用recursive function
    List<List<Integer>> result = new ArrayList<>();
    if(target <= 1){
      return result;
    }
    List<Integer> cur = new ArrayList<>();
    List<Integer> factors = getFactors(target);
    helper(result, cur, factors, 0, target);
    return result;
  }

  private void helper(List<List<Integer>> result, List<Integer> cur, List<Integer> factors, int index, int
  target){
    //base case
    if(index == factors.size()){
      if(target == 1){
        result.add(new ArrayList<>(cur));
      }
      return;
    }
    int factor = factors.get(index);
    int count = 0;
    while(target % factor == 0){
      count++;
      cur.add(factor);
      helper(result, cur, factors, index + 1, target /= factor);
    }
    //另一种形式的吐出来
    for(int i = 0; i < count; i++){
      cur.remove(cur.size() - 1);
      target *= factor;
    }
    helper(result, cur, factors, index + 1, target);
  }

  private List<Integer> getFactors(int target){
    List<Integer> factors = new ArrayList<>();
    for(int i = target / 2; i > 1; i--){
      if(target % i == 0){
        factors.add(i);
      }
    }
    List<Integer> list = new ArrayList<>();
    for (int i = factors.size() - 1; i >= 0; i--) {
      list.add(factors.get(i));
    }
    return list;
  }
}



All subset II

public class Solution {
  public List<String> subSets(String set) {
    List<String> res = new ArrayList<>();
    if(set == null){
      return res;
    }
    char[] array = set.toCharArray();
    StringBuilder sb = new StringBuilder();
    Arrays.sort(array);
    Set<String> setter = new HashSet<>();
    helper(setter, res, sb, array, 0);
    return getResult(setter, res);
  }

  private void helper(Set<String> setter, List<String> res, StringBuilder sb, char[] array, int index){
    //base case:
    setter.add(sb.toString());
    if(index == array.length){
      return;
    }
    sb.append(array[index]);
    helper(setter, res, sb, array, index + 1);
    sb.deleteCharAt(sb.length() - 1);
    //remove duplicates
    while(index < array.length - 1 && array[index + 1] == array[index]){
      index++;
    }
    helper(setter, res, sb, array, index + 1);
  }

  private List<String> getResult(Set<String> setter, List<String> res) {
    for (String str : setter) {
      res.add(str);
    }
    return res;
  }
}
