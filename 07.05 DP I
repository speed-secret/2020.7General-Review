今天目标是把 孙老师上课讲的东西过一遍；

然后所有1维DP里面的题目都过一遍；

训练一题DP的一维中等题，那就是array hopper II吧
然后自己仔细总结

1. Longest Ascending Subarray
Given an unsorted array, find the length of the longest subarray in which the numbers are in ascending order.

Assumptions

The given array is not null
Examples

{7, 2, 3, 1, 5, 8, 9, 6}, longest ascending subarray is {1, 5, 8, 9}, length is 4.

{1, 2, 3, 3, 4, 4, 5}, longest ascending subarray is {1, 2, 3}, length is 3.

//use DP to traverse the whole array
//maintain an int variable to record the globalMax
//maintain another int variable to record the curMax
//at each end of the for loop, update the globalMax;

//base case: curMax = 1;


//Induction rule:
//curMax represent the curMax longest subArray from [0, i] included i;
//  if (input[i] < input[i - 1]) {
//  curMax update to 1;
//  }
//globalMax represent the maximum longest subArray from[0, i], ready to return;


if (input == null || input.length == 0) {
  return 0;
}
int curMax = 1;
int globalMax = 1;
for (int i = 1; i < input.length; i++) {
  if (input[i] <= input[i - 1]) {
    curMax = 1;
  } else {
    curMax++;
  }
  globalMax = Math.max(curMax, globalMax);
}
return globalMax;
}


2. Largest subArraySum

Given an unsorted integer array, find the subarray that has the greatest sum. Return the sum.

Assumptions

The given array is not null and has length of at least 1.
Examples

{2, -1, 4, -2, 1}, the largest subarray sum is 2 + (-1) + 4 = 5

{-2, -1, -3}, the largest subarray sum is -1

//us DP and linear scan the whole array
//maintain an int variable lastIndex so can be updated dynamically

//base case 
//lastMax = array[0];
//induction rule:
//lastMax = Math.max(lastIndex + array[i], array[i]);
//globalMax = Math.max(lastIndex, globalMax);

private int getLargestSubArray(int[] array) {
  if (array == null || array.length == 0) {
    return Integer.MIN_VALUE;
  }
  int lastMax = array[0];
  int globalMax = lastMax;
  for (int i = 1; i < array.length; i++) {
    lastMax = Math.max(lastMax + array[i], array[i]);
    globalMax = Math.max(globalMax, lastMax);
  }
  return globalMax;
}


Follow up: get its globalLeft and globalRight

//there are more variables here:
//int curLeft;
//int globalLeft;
//int globalRight;
//int lastMax;
//int globalMax;
//base case 
//lastMax = array[0];
//induction rule:
//check if it is necessary to update the curLeft
//then update lastMax = Math.max(lastMax + array[i], array[i]);
//if (globalMax < lastMax) {
//update globalLeft and globalRight
//globalMax = Math.max(lastIndex, globalMax);

private int getLargestSubArray(int[] array) {
  if (array == null || array.length == 0) {
    return Integer.MIN_VALUE;
  }
  int lastMax = array[0];
  int globalMax = lastMax;
  for (int i = 1; i < array.length; i++) {
  //因为lastMax这样的话必定取当前值为新的lastMax，那么curLeft势必会被强制初始化呈现在这个位置
    if (lastMax < 0) {
      curLeft = i;
    }
    lastMax = Math.max(lastMax + array[i], array[i]);
    if (globalMax < lastMax) {
      globalMax = lastMax;
      globalLeft = curLeft;
      globalRight = i;
    }
  }
  System.out.println(globalLeft);
  System.out.println(globalRight);
  return globalMax;
}

ArrayHopper II
Given an array A of non-negative integers, you are initially positioned at index 0 of the array. 
A[i] means the maximum jump distance from index i (you can only jump towards the end of the array). 
Determine the minimum number of jumps you need to reach the end of array. If you can not reach the end of the array, return -1.

Assumptions

The given array is not null and has length of at least 1.
Examples

{2, 2, 3, 3, 1, 5}, the minimum jumps needed is 2 (jump to index 1 then to the end of array)
 0  1  1  2  2  2
{2, 1, 1, 0, 2}, you are not able to reach the end of array, return -1 in this case.

//assume the array is not empty or the array.length >= 1;
//use DP
//create a boolean[] array which represent the minimum jumps from index 0 to index i

//base case is minJump[0] = 0; which means from index 0 to index 0 don't cost any step

//induction rule:
//look back to 
//check if the jth step can jump or not, and if it can jump, can they jump at least to index i
//if all those conditions met, do compare with the minimum step with former jumps

//assume array.length >= 1;

boolean[] canJump = new boolean[array.length];
canJump[0] = 0;
for (int i = 1; i < array.length; i++) {
  canJump[i] = -1;
  for (int j = 0; j < i; j++) {
    if (canJump[j] != -1 && array[j] + j >= i) {
      if (canJump[i] == -1 || canJump[i] > canJump[j] + 1) {
        canJump[i] = canJump[j] + 1;
      }
    }
  }
}
return canJump[array.length - 1];
}

Edit Distance

Given two strings of alphanumeric characters, 
determine the minimum number of Replace, Delete, 
and Insert operations needed to transform one string into the other.

Assumptions

Both strings are not null
Examples

string one: “sigh”, string two : “asith”

the edit distance between one and two is 2 (one insert “a” at front then replace “g” with “t”).

//two-D matrix

int[][] result = new int[n + 1][n + 1];
for (int i = 0; i <= n; i++) {
  for (int j = 0; j <= n; j++) {
    if (i == 0) {
      result[0][j] = j;
    }
    if (j == 0) {
      result[i][0] = i;
    }
    if (one.charAt(i - 1) == two.charAt(j - 1)) {
      result[i][j] = result[i - 1][j - 1];
    } else {
      result[i][j] = Math.min(result[i - 1][j] + 1, result[i][j - 1] + 1);
      result[i][j] = Math.min(result[i - 1][j - 1] + 1, result[i][j]);
    }
  }
}
return result[n][n];
}
